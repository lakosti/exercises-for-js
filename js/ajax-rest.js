// JSON --- В ПОДВІЙНИХ ЛАПКАХ І КЛЮЧ І ЗНАЧЕННЯ
// 404 помилка рахується як позитивна тому її потрібно додатково оброблювати
// throw new Error == викид помилки - перевод проміс в стан rejected -- і потім відразу переходимо до catch
// кожен then повертає результат наступного

// АРХІТЕКТУРНА СИСТЕМА :
// 1. REST -- швидка, легко парситься, не дуже секюрна базується на JSON
// 2. SOAP  -- сейюрна, передає багато інформ за раз (банк сфера / зсу), складно парситься за допомогою JAVA, базується на XML, ств додатковий файл на wsdl

// fetch -- асинхронна операція // повертає проміс
// fetch === HTTP / HTTPS протоколи  -- запити на бекенд

// ОСНОВНІ HTTP методи
// GET -- отримати дані
// POST -- надіслати та СТВОРИТИ нові дані (реєстрація користувача, створення форми (реєстрації, знижки)) До цього цих даних не існувало в БД
// PUT(повне) / PATCH(часткове) -- надіслати дані та ОНОВИТИ існуючі
// DELETE -- видалити наявні дані

// ВИДИ СЕРВЕРІВ
// СТАТИЧНИЙ (КЛІЄНТ + СЕРВЕР)
// ДИНАМІЧНИЙ (КЛІЄНТ + СЕРВЕР + БД)
// ПУБЛІЧНИЙ API (не можна використовувати HTTP запити окрім GET -- тобто ці дані не можна змінювати)
// ПРИВАТНИЙ (особисто свій -- можна змінювати дані)

// ЩО ТАКЕ API  --- спеціальний інтерфейс за допомогою якого фронтенд спілкується з бекендом (від клієнта забрав запит і передав на сервер - потім коли сервер обробив дані, api відніс їх клієнту)

///////////////////////////////// EXAMPLE /////////////////////////////////////////

// const list = document.querySelector('.js-list');

// const getResponse = () => {
//     return fetch('https://jsonplaceholder.typicode.com/todos').then(response => {
//         if (!response.ok) {
//             throw new Error(response.status);
//         }
//         return response.json(); // обов`язково вказуємо return бо буде undefined // json -- парсить(дістає) дані з сервера (витягує з body промісу)
//     });
// };

// //ОБРОБКА ПОМИЛОК РОБИТЬСЯ В МІСЦІ ВИКЛИКУ ФУНКЦІЇ А НЕ ВСЕРЕДИНІ
// //кожен наступний зен повертає результат попереднього
// getResponse()
//     .then(data => {
//         console.log(data);
//         list.insertAdjacentHTML('beforeend', createMarkup(data));
//     })
//     .catch(err => console.log(err));

// //створюємо розмітку
// function createMarkup(data) {
//     return data.map(createLi).join('');
// }

// //створюємо просто лішку
// function createLi({ id, title }) {
//     return `<li><h2>${id}</h2><p>${title}</p></li>`;
// }
